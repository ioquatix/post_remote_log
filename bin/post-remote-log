#!/usr/bin/env ruby

# Copyright (c) 2010 Samuel Williams. Released under the GNU GPLv3.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

if ARGV.delete("-d")
	exec("daemon-exec", "--stdin", "--", $0, *ARGV)
end

require 'post_remote_log'
require 'post_remote_log/methods'

require 'yaml'
require 'optparse'

OPTIONS = {
	:config => "/etc/post-remote-log.conf",
	:verbose => false
}

ARGV.options do |o|
	script_name = File.basename($0)

	o.set_summary_indent("\t")
	o.banner = "Usage: #{script_name} [options] [classification] < log-data.txt"
	o.define_head "Copyright (c) 2010 Samuel Williams <http://www.oriontransfer.co.nz/>."

	o.on("-c config.yaml", String, "Configuration file; defaults to #{OPTIONS[:config]}") do |path|
		OPTIONS[:config] = path
	end

	o.on("-d", "Run in background as a daemon. Requires daemon-exec.") do
		# This option is handled above.
	end
	
	o.on("-v", "Verbose output.") do
		OPTIONS[:verbose] = true
	end
end.parse!

# Load the configuration
if File.exists?(OPTIONS[:config])
	$config = YAML::load(File.read(OPTIONS[:config])).symbolize_keys
	$config[:classification] ||= "Generic Log"
else
	$stderr.puts "Error: Could not load configuration file #{OPTIONS[:config]}!"
	raise
end

# Read the log information from stdin:
report = $stdin.read.strip
$stdin.close

if report.size == 0
	$stderr.puts "Error: No report supplied, exiting!"
	exit(1)
end

# Build a set of important values which will be logged:
$values = {
	:classification => ARGV[0] || $config[:classification],
	:uptime => `uptime`.strip,
	:system => `uname -a`.strip,
	:hostname => `hostname`.strip,
	:address => `ifconfig`.match(/[0-9a-z]{2}:[0-9a-z]{2}:[0-9a-z]{2}:[0-9a-z]{2}:[0-9a-z]{2}:[0-9a-z]{2}/i)[0],
	:user => `whoami`.strip,
	:report => report
}

$config[:methods].each do |entry|
	begin
		name, config = entry

		puts "Evaluating method #{config[:method]}:#{name} which is #{config[:disabled] ? 'disabled' : 'enabled'}..." if OPTIONS[:verbose]

		next if config[:disabled] == true

		method = PostRemoteLog::Methods.load_method(config[:method])

		method.send(config, $values)
	rescue => ex
		puts ex.to_s
		puts ex.backtrace
	end
end
