#!/usr/bin/env ruby

# Copyright (c) 2009, 2011 Samuel G. D. Williams. <http://www.oriontransfer.co.nz>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

if ARGV.delete("-d")
	exec("daemon-exec", "--stdin", "--", $0, *ARGV)
end

require 'post_remote_log'
require 'post_remote_log/methods'

require 'yaml'
require 'optparse'

OPTIONS = {
	:config => "/etc/post-remote-log.conf",
	:verbose => false
}

ARGV.options do |o|
	script_name = File.basename($0)

	o.set_summary_indent("\t")
	o.banner = "Usage: #{script_name} [options] [classification] < log-data.txt"
	o.define_head "Copyright (c) 2010 Samuel Williams <http://www.oriontransfer.co.nz/>."

	o.on("-c config.yaml", String, "Configuration file; defaults to #{OPTIONS[:config]}") do |path|
		OPTIONS[:config] = path
	end

	o.on("-d", "Run in background as a daemon.") do
		# This option is handled above.
	end
	
	o.on("-v", "Verbose output.") do
		OPTIONS[:verbose] = true
	end
end.parse!

# Load the configuration
if File.exists?(OPTIONS[:config])
	$config = YAML::load(File.read(OPTIONS[:config])).symbolize_keys
	$config[:classification] ||= "Generic Log"
else
	$stderr.puts "Error: Could not load configuration file #{OPTIONS[:config]}!"
	exit 255
end

# Read the log information from stdin:
report = $stdin.read.strip
$stdin.close

if report.size == 0
	$stderr.puts "Error: No report supplied, exiting!"
	exit(1)
end

# Build a set of important values which will be logged:
$values = {
	:classification => ARGV[0] || $config[:classification],
	:uptime => `uptime`.strip,
	:system => `uname -a`.strip,
	:hostname => `hostname`.strip,
	:address => `ifconfig`.match(/[0-9a-z]{2}:[0-9a-z]{2}:[0-9a-z]{2}:[0-9a-z]{2}:[0-9a-z]{2}:[0-9a-z]{2}/i)[0],
	:user => `whoami`.strip,
	:report => report
}

$config[:methods].each do |entry|
	begin
		name, config = entry

		puts "Evaluating method #{config[:method]}:#{name} which is #{config[:disabled] ? 'disabled' : 'enabled'}..." if OPTIONS[:verbose]

		next if config[:disabled] == true

		method = PostRemoteLog::Methods.load_method(config[:method])

		method.send(config, $values)
	rescue => ex
		puts ex.to_s
		puts ex.backtrace
	end
end
